import React, { useState } from "react";
import {
  TextField,
  Button,
  Typography,
  Box,
  Grid,
  Paper,
  CircularProgress,
  Alert,
  Divider,
} from "@mui/material";
import MessageCard from "./MessageCard";
import api from "../api";

const HAZARD_CATEGORIES_RU = {
  "S1": "–ù–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
  "S2": "–ù–µ–Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
  "S3": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –ø–æ—á–≤–µ",
  "S4": "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –¥–µ—Ç–µ–π",
  "S5": "–ö–ª–µ–≤–µ—Ç–∞",
  "S6": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
  "S7": "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
  "S8": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
  "S9": "–û—Ä—É–∂–∏–µ –Ω–µ–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
  "S10": "–í—Ä–∞–∂–¥–µ–±–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
  "S11": "–°—É–∏—Ü–∏–¥ –∏ —á–ª–µ–Ω–æ–≤—Ä–µ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
  "S12": "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞",
  "S13": "–í—ã–±–æ—Ä—ã"
};

const GuardSection = ({ downloadJSON }) => {
  const [loadingGuard, setLoadingGuard] = useState(false);
  const [showGuardResults, setShowGuardResults] = useState(true);
  const [guardCategory, setGuardCategory] = useState("");
  const [guardLimit, setGuardLimit] = useState(10);
  const [guardResult, setGuardResult] = useState(null);

  const handleGuardAnalyze = async () => {
    if (!guardCategory) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.");
      return;
    }
    setLoadingGuard(true);
    setGuardResult(null);
    try {
      const response = await api.post("/api/guard/category", {
        category: guardCategory,
        limit: guardLimit,
      });
      setGuardResult(response.data);
      downloadJSON(response.data, `guard_result_${guardCategory}`);
    } catch (error) {
      console.error("Guard Analyze Error:", error);
      alert("An error occurred during the hazard content analysis. Please try again.");
    } finally {
      setLoadingGuard(false);
    }
  };

  return (
    <Paper elevation={3} sx={{ p: 3 }}>
      <Typography variant="h5" gutterBottom>
        –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç üõ°Ô∏è
      </Typography>
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <Typography variant="subtitle1" gutterBottom>
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          </Typography>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
            {Object.entries(HAZARD_CATEGORIES_RU).map(([code, name]) => (
              <Button 
                key={code} 
                variant={guardCategory === code ? "contained" : "outlined"} 
                onClick={() => setGuardCategory(code)}
                size="small"
              >
                {name}
              </Button>
            ))}
          </Box>
        </Grid>
        <Grid item xs={12}>
          <TextField 
            label="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" 
            name="guardLimit" 
            type="number" 
            fullWidth 
            value={guardLimit} 
            onChange={(e) => setGuardLimit(Number(e.target.value))} 
          />
        </Grid>
        <Grid item xs={12}>
          <Button 
            variant="contained" 
            color="error" 
            onClick={handleGuardAnalyze} 
            fullWidth 
            disabled={loadingGuard}
          >
            {loadingGuard && guardCategory ? (
              <CircularProgress size={24} />
            ) : (
              "–ù–∞–π—Ç–∏ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            )}
          </Button>
        </Grid>
      </Grid>

      <Box mt={2}>
        <Button variant="text" onClick={() => setShowGuardResults((prev) => !prev)}>
          {showGuardResults ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        </Button>
      </Box>
      
      {showGuardResults && guardResult && (
        <Box mt={2}>
          <Typography>
            –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <strong>{guardResult.count}</strong>
          </Typography>
          <Typography>
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>{HAZARD_CATEGORIES_RU[guardCategory] || guardResult.category}</strong>
          </Typography>
          <Box 
            mt={2} 
            p={2} 
            sx={{ 
              display: 'flex', 
              flexDirection: 'column', 
              backgroundColor: '#f0f2f5', 
              borderRadius: 2 
            }}
          >
            {guardResult.matches.length > 0 ? (
              guardResult.matches.map((msg, index) => (
                <MessageCard key={index} message={msg} isSentByUser={false} />
              ))
            ) : (
              <Alert severity="success">
                –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
              </Alert>
            )}
          </Box>
        </Box>
      )}

      <Divider sx={{ my: 4 }} />
    </Paper>
  );
};

export default GuardSection;